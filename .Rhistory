myDF %>% count(carCompany) %>% mutate(percentShare = n/sum(n)) %>% slice(1) %>% select(carCompany)
myDF %>% filter(sizeClass == "Compact" & mpg <18) %>% nrow(.)
myDF %>% filter(sizeClass == "Compact" & mpg <18) %>% nrow(.)/nrow(myDF)
myDF %>% filter(sizeClass == "Compact" & mpg <18) %>% nrow(.)/nrow(filter(sizeClass=="Compact"))
myDF %>% filter(sizeClass == "Compact" & mpg <18) %>% nrow(.)/nrow(myDF,filter(sizeClass=="Compact"))
myDF %>% filter(sizeClass == "Compact" & mpg <18) %>% nrow(.)/nrow(filter(myDF,sizeClass=="Compact"))
myDF %>% filter(electric==T) %>% nrow(.)/nrow(myDF)
myDF %>% filter(electric==T) %>% count(carCompany)
myDF %>% filter(electric==T) %>% count(carCompany) %>% max(n) %>% select(carCompany)
myDF %>% filter(electric==T) %>% count(carCompany) %>% top_n(n) %>% select(carCompany)
myDF %>% filter(electric==T) %>% count(carCompany) %>% top_n(n) %>% select(carCompany)
myDF %>% filter(electric==T) %>% count(carCompany)
myDF %>% filter(electric==T) %>% count(carCompany) %>% top_n(1,n) %>% select(carCompany)
myDF %>% filter(electric==T) %>% count(sizeClass) %>% top_n(1,n) %>% select(sizeClass)
census <- read.csv("/Users/jacquessham/Documents/BSDS100/Assignment3/census2015.csv")
dplyr::glimpse(census)
census %>% group_by(State) %>% summarise(statePop = sum(TotalPop))
census %>% group_by(State) %>% summarise(statePop = sum(TotalPop)) %>% arrange(desc(.))
census %>% group_by(State) %>% summarise(statePop = sum(TotalPop)) %>% arrange(desc(statePop))
census %>% group_by(State) %>% summarise(statePop = sum(TotalPop)) %>% mutate(statePop/sum(statePop))
census %>% group_by(State) %>% summarise(statePop = sum(TotalPop)) %>% mutate(prct = statePop/sum(statePop)) %>% arrange(desc(prct))
census %>% group_by(State) %>% summarise(statePop = sum(TotalPop)) %>% mutate(prct = statePop/sum(statePop)) %>% arrange(desc(prct)) %>% slice(5)
census %>% group_by(State) %>% summarise(statePop = sum(TotalPop)) %>% mutate(prct = statePop/sum(statePop)) %>% arrange(desc(prct)) %>% slice(1:5)
census %>% group_by(State) %>% summarise(statePop = sum(TotalPop)) %>% mutate(prct = statePop/sum(statePop)) %>% arrange(desc(prct)) %>% filter(prct>= 0.3 &prct<= 0.4)
census %>% group_by(State) %>% summarise(statePop = sum(TotalPop)) %>% mutate(prct = statePop/sum(statePop)) %>% arrange(desc(prct)) %>% filter(prct>= 0.03 &prct<= 0.04)
census %>% group_by(State) %>% summarise(statePop = sum(TotalPop)) %>% mutate(prct = statePop/sum(statePop)) %>% arrange(desc(prct)) %>% filter(prct>= 0.03 &prct<= 0.04) %>% top_n(1,prct) %>% select(State)
myVec <- factor(c("o","l","s"),levels=c("o","l"),ordered=T)
myVec
data <- babynames
library(babynames)
data <- babynames
library(dplyr)
library(magrittr)
glimpse(data)
data %>% group_by(year) %>% summarise(total = sum(n))
data %>% group_by(year) %>% summarise(total = sum(n)) %>% slice(seq(1,nrow(.),by=20))
data %>% count(year) %>% slice(seq(1,nrow(.),by=20))
library(hflights)
data <- hflights
glimpse(data)
data %>% group_by(UniqueCarrier) %>% summarise(meanAirTime = mean(AirTime)) %>% mutate(mean++ = meanAirTime+1)
data %>% group_by(UniqueCarrier) %>% summarise(meanAirTime = mean(AirTime)) %>% mutate(meanplusplus = meanAirTime+1)
data %>% group_by(UniqueCarrier) %>% summarise(meanAirTime = mean(AirTime,na.rm=T)) %>% mutate(meanplusplus = meanAirTime+1)
table(data$UniqueCarrier)
max(table(data$UniqueCarrier))
glimpse(data)
max(table(data$UniqueCarrier[Cancelled==T]))
max(table(data$UniqueCarrier[data$Cancelled==T]))
sum(table(data$UniqueCarrier[data$Distance>1000]))
sum(table(data$UniqueCarrier[data$Distance>2000]))
table(data$UniqueCarrier[data$Distance>2000])
sum(table(data$UniqueCarrier[data$Distance>1000]))
table(data$UniqueCarrier[data$Distance>1000])
library(dplyr)
library(magrittr)
data %>% filter(Cancelled==T) %>% group_by(UniqueCarrier) %>% arrange(desc(.))
data %>% filter(Cancelled==T) %>% count(UniqueCarrier) %>% arrange(desc(.))
data %>% filter(Cancelled==T) %>% count(UniqueCarrier) %>% arrange(desc(n))
data %>% filter(Cancelled==T) %>% count(UniqueCarrier) %>% arrange(desc(n)) %>% slice(1)
max(table(data$UniqueCarrier[data$Cancelled==T]))
data %>% filter(Distance>1000) %>% nrow(.)
sum(table(data$UniqueCarrier[data$Distance>1000]))
library(ggplot2)
data <- diamonds
View(data)
library(dplyr)
library(magrittr)
data <- read.csv(/Users/jacquessham/Documents/BSDS100/Examples/Week7/mammalSleep.csv)
data <- read.csv("/Users/jacquessham/Documents/BSDS100/Examples/Week7/mammalSleep.csv")
glimpse(data)
glimpse(data)
data %>% ggplot(aes(x= vore,y= sleep_total)) %>% geom_point()
library(ggplot2)
data %>% ggplot(aes(x= vore,y= sleep_total)) %>% geom_point()
data %>% ggplot(aes(x= vore,y= sleep_total)) + geom_point()
data %>% select(!is.na(.)) %>% ggplot(aes(x= vore,y= sleep_total)) + geom_point()
data %>% slice(!is.na(.)) %>% ggplot(aes(x= vore,y= sleep_total)) + geom_point()
data %>% ggplot(aes(x= vore,y= sleep_total)) + geom_point()
data %>% filter(!is.na(sleep_total)) %>% ggplot(aes(x= vore,y= sleep_total)) + geom_point() %>%
data %>% filter(!is.na(sleep_total)) %>% ggplot(aes(x= vore,y= sleep_total)) + geom_point()
data %>% filter(!is.na(sleep_total)) %>% ggplot(aes(x= vore,y= sleep_total)) + geom_point()
group_by(vore) %>% plot(mean(sleep_total))
data %>% filter(!is.na(sleep_total)) %>% ggplot(aes(x= vore,y= sleep_total)) + geom_point() %>%
group_by(vore) %>% plot(mean(sleep_total))
data %>% filter(!is.na(sleep_total)) %>% ggplot(aes(x= vore,y= sleep_total)) + geom_point() %>%
group_by(vore)
data %>% filter(!is.na(sleep_total)) %>% ggplot(aes(x= vore,y= sleep_total)) + geom_point() %>%
group_by(vore) %>% summarise(mean_sleep = mean(sleep_total))
data %>% group_by(vore) %>% summarise(mean_sleep = mean(sleep_total))
data %>% filter(!is.na(vore)) %>% ggplot(aes(x= vore,y= sleep_total)) + geom_point()
data %>% filter(!is.na(vore)) %>%group_by(vore) %>% summarise(mean_sleep = mean(sleep_total))
data %>% filter(!is.na(vore)) %>% ggplot(aes(x= vore,y= sleep_total), colours(vore)) + geom_point()
data %>% filter(!is.na(vore)) %>% ggplot(aes(x= vore,y= sleep_total), colour= vore) + geom_point()
data %>% filter(!is.na(vore)) %>% ggplot(aes(x= vore,y= sleep_total), fill = vore) + geom_point()
data %>% filter(!is.na(vore)) %>% ggplot(aes(x= vore,y= sleep_total), fill = "vore") + geom_point()
data %>% filter(!is.na(vore)) %>% ggplot(aes(x= vore,y= sleep_total), colour = vore) + geom_point()
library(dplyr)
library(magrittr)
library(ggplot2)
library(devtool)
library(ggmap)
library(maps)
library(mapdata)
usa <- map_data("world")
ggplot() + geom_polygon(data = usa, aes(x=long,y=lat,group=group)) + coord_fixed(1.3)
install.packages(c("BH", "bindr", "bindrcpp", "broom", "curl", "DBI", "hms", "knitr", "lme4", "lubridate", "MASS", "mgcv", "nlme", "openssl", "pillar", "plogr", "quantreg", "Rcpp", "RcppEigen", "rlang", "rmarkdown", "rpart", "selectr", "stringi", "stringr", "tidyselect", "viridis", "viridisLite", "withr", "XML", "yaml"))
install.packages(c("BH", "bindr", "bindrcpp", "broom", "curl",
knitr::opts_chunk$set(echo = F)
knitr::opts_chunk$set(fig.width = 5.5, fig.height= 3)
library(tidyverse)
library(hflights)
library(magrittr)
library(scales)
library(reshape2)
library(gcookbook)
setwd("/Users/jacquessham/Documents/BSDS100/Assignment4")
library(tidyverse)
library(magrittr)
library(ggplot2)
subdata <- master %>% group_by(time,sex) %>% summarise(avg_tips = mean(tip/total_bill))
subdata %>% ggplot(aes(x=time,y=avg_tips,shape=sex)) +geom_point(aes(colour= sex)) + labs(x="Meal Time",y="Mean Percent Tip") +
geom_segment(aes(x=subdata[1,1],xend=subdata[3,1],y=subdata[1,3],yend=subdata[3,3]),linetype=3) +
geom_segment(aes(x=subdata[2,1],xend=subdata[4,1],y=subdata[2,3],yend=subdata[4,3]),linetype=3) +
scale_y_continuous(labels = percent) + expand_limits(y=c(0.15,0.18))
master <- reshape::tips
subdata <- master %>% group_by(time,sex) %>% summarise(avg_tips = mean(tip/total_bill))
subdata %>% ggplot(aes(x=time,y=avg_tips,shape=sex)) +geom_point(aes(colour= sex)) + labs(x="Meal Time",y="Mean Percent Tip") +
geom_segment(aes(x=subdata[1,1],xend=subdata[3,1],y=subdata[1,3],yend=subdata[3,3]),linetype=3) +
geom_segment(aes(x=subdata[2,1],xend=subdata[4,1],y=subdata[2,3],yend=subdata[4,3]),linetype=3) +
scale_y_continuous(labels = percent) + expand_limits(y=c(0.15,0.18))
library(tidyverse)
library(magrittr)
library(ggplot2)
master <- reshape::tips
View(master)
master %>% ggplot(aes(x=size,y=tip,colour=sex))+geom_point()
master %>% ggplot(aes(x=total_bill,y=tip,colour=sex))+geom_point()
master %>% ggplot(aes(x=total_bill,y=tip,colour=sex,shape=time))+geom_point()+labs(x="Total Amount of the Bill ($)",y="Tip ($)")+ggtitle("How much do people tip?")
master %>% ggplot(aes(x=total_bill,y=tip,colour=sex,shape=time))+
geom_point()+labs(x="Total Amount of the Bill ($)",y="Tip ($)")+
ggtitle("How much do people tip?")+theme(plot.title = element_text(hjust = 0.5))
master %>% ggplot(aes(x=total_bill,y=tip,colour=sex,shape=time))+
geom_point(size=2)+labs(x="Total Amount of the Bill ($)",y="Tip ($)")+
ggtitle("How much do people tip?")+theme(plot.title = element_text(hjust = 0.5))
## Set the working dir according to who is working
curr_wd <- strsplit(getwd(), "/")[[1]]
if ("chunheisiu" %in% curr_wd) {
setwd("/Users/chunheisiu/Dropbox/Documents/USF/2018_Spring/BSDS_100/USF-BSDS100-CaseStudy")
} else if ("jacquessham" %in% curr_wd) {
setwd("/Users/jacquessham/Documents/GitHub/USF-BSDS100-CaseStudy")
} else {
wd <- readline(prompt = "You're not Jacques or Charles! Enter the path to the data: ")
setwd(wd)
}
## Read the data
data <- read.csv("Air_Traffic_Passenger_Statistics.csv")
# First, let's clean the data.
# Rename the column names
names(data) <- c("date", "operAirline", "operCode", "airline", "code", "isDomestic",
"region", "type", "category", "terminal", "area", "pax")
# Convert isDomestic to boolean
data$isDomestic %<>% recode("Domestic" = T, "International" = F)
# Reformat the dates into Date objects
data$date %<>%
as.character() %>%
as.yearmon("%Y%m") %>%
as.Date()
# Get month and year values
data %<>%
mutate(month = date %>% format("%m") %>% factor(labels = month.name),
year = date %>% format("%Y") %>% as.numeric())
# Remove data from 2005 for easy comparison
data %<>% filter(year != 2005)
data$region %<>% recode("Central America" = "Latin America",
"South America" = "Latin America")
data$category %<>% recode("Other" = "Full Service")
## operAirline = Operating Airline, the airline that really operating, some airline would own a child company to operate a single route
## operCode = Operating Airline Code
## airline = Published Airline, mother company airline
## code = Published Airline Code, code for variable "airline"
## isDomestic: If the flight is domestic,T; if international: F
## region: Geom region
## type: activity type; Deplaned means arrival, Enplaned means departure, Thru / Transit is other
## category: Airline price type; Low fare is Low cost carrier, else are others
## terminal: SFO terminal
## area: area within SFO terminal
## pax: passenger count of given row
data %>%
group_by(isDomestic,month) %>%
summarise(avg_pax = round(mean(pax),digit =0)) %>%
ggplot(aes(x=month,y=avg_pax,fill=isDomestic,label = avg_pax)) +
theme_minimal() +
geom_bar(stat="identity",alpha=0.8) +
labs(x="Month",y="Passengers") +
scale_y_continuous(labels = comma) +
ggtitle("The Monthly Average Passengers Count") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_discrete(name = "Destination",label=c("International","Domestic")) +
theme(plot.title = element_text(size = 20, face = "bold")) +
geom_text(size = 2, position = position_stack(vjust = 0.85), colour = "white")
# First, let's clean the data.
# Rename the column names
names(data) <- c("date", "operAirline", "operCode", "airline", "code", "isDomestic",
"region", "type", "category", "terminal", "area", "pax")
# Convert isDomestic to boolean
data$isDomestic %<>% recode("Domestic" = T, "International" = F)
# Reformat the dates into Date objects
data$date %<>%
as.character() %>%
as.yearmon("%Y%m") %>%
as.Date()
# Get month and year values
data %<>%
mutate(month = date %>% format("%m") %>% factor(labels = month.name),
year = date %>% format("%Y") %>% as.numeric())
# Remove data from 2005 for easy comparison
data %<>% filter(year != 2005)
data$region %<>% recode("Central America" = "Latin America",
"South America" = "Latin America")
data$category %<>% recode("Other" = "Full Service")
## operAirline = Operating Airline, the airline that really operating, some airline would own a child company to operate a single route
## operCode = Operating Airline Code
## airline = Published Airline, mother company airline
## code = Published Airline Code, code for variable "airline"
## isDomestic: If the flight is domestic,T; if international: F
## region: Geom region
## type: activity type; Deplaned means arrival, Enplaned means departure, Thru / Transit is other
## category: Airline price type; Low fare is Low cost carrier, else are others
## terminal: SFO terminal
## area: area within SFO terminal
## pax: passenger count of given row
data %>%
group_by(isDomestic,month) %>%
summarise(avg_pax = round(mean(pax),digit =0)) %>%
ggplot(aes(x=month,y=avg_pax,fill=isDomestic,label = avg_pax)) +
theme_minimal() +
geom_bar(stat="identity",alpha=0.8) +
labs(x="Month",y="Passengers") +
scale_y_continuous(labels = comma) +
ggtitle("The Monthly Average Passengers Count") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_discrete(name = "Destination",label=c("International","Domestic")) +
theme(plot.title = element_text(size = 20, face = "bold")) +
geom_text(size = 2, position = position_stack(vjust = 0.85), colour = "white")
## Set the working dir according to who is working
curr_wd <- strsplit(getwd(), "/")[[1]]
if ("chunheisiu" %in% curr_wd) {
setwd("/Users/chunheisiu/Dropbox/Documents/USF/2018_Spring/BSDS_100/USF-BSDS100-CaseStudy")
} else if ("jacquessham" %in% curr_wd) {
setwd("/Users/jacquessham/Documents/GitHub/USF-BSDS100-CaseStudy")
} else {
wd <- readline(prompt = "You're not Jacques or Charles! Enter the path to the data: ")
setwd(wd)
}
## Read the data
data <- read.csv("Air_Traffic_Passenger_Statistics.csv")
# First, let's clean the data.
# Rename the column names
names(data) <- c("date", "operAirline", "operCode", "airline", "code", "isDomestic",
"region", "type", "category", "terminal", "area", "pax")
# Convert isDomestic to boolean
data$isDomestic %<>% recode("Domestic" = T, "International" = F)
# Reformat the dates into Date objects
data$date %<>%
as.character() %>%
as.yearmon("%Y%m") %>%
as.Date()
# Get month and year values
data %<>%
mutate(month = date %>% format("%m") %>% factor(labels = month.name),
year = date %>% format("%Y") %>% as.numeric())
# Remove data from 2005 for easy comparison
data %<>% filter(year != 2005)
data$region %<>% recode("Central America" = "Latin America",
"South America" = "Latin America")
data$category %<>% recode("Other" = "Full Service")
## operAirline = Operating Airline, the airline that really operating, some airline would own a child company to operate a single route
## operCode = Operating Airline Code
## airline = Published Airline, mother company airline
## code = Published Airline Code, code for variable "airline"
## isDomestic: If the flight is domestic,T; if international: F
## region: Geom region
## type: activity type; Deplaned means arrival, Enplaned means departure, Thru / Transit is other
## category: Airline price type; Low fare is Low cost carrier, else are others
## terminal: SFO terminal
## area: area within SFO terminal
## pax: passenger count of given row
## Need to clean up incorrect data
## Below has the list of low cost carrier
## https://www.icao.int/sustainability/Documents/LCC-List.pdf
## Merge "United Airlines - Pre 07/01/2013" to "United Airlines"
data$airline %<>% recode("United Airlines - Pre 07/01/2013" = "United Airlines")
## Remove the strip of "Emirates "
data$airline %<>% recode("Emirates " = "Emirates")
## Some airlines were wrongly identify in category, convert the below airlines to full service
data[which(data$airline=="Air China"|
data$airline== "Air India Limited"|
data$airline=="Air New Zealand"|
data$airline=="Air Pacific Limited dba Fiji Airways"|
data$airline=="Emirates"| data$airline=="United Airlines" |
data$airline=="Virgin America" | data$airline == "Volaris Airlines" |
data$airline=="Delta Air Lines" | data$airline=="US Airways"),"category"]<-"Full Service"
## Convert the below airlines to low cost carrier
data[which(data$airline=="XL Airways France" |
data$airline=="WOW Air"|
data$airline=="WestJet Airlines"),"category"] <- "Low Fare"
data %>%
group_by(isDomestic,month) %>%
summarise(avg_pax = round(mean(pax),digit =0)) %>%
ggplot(aes(x=month,y=avg_pax,fill=isDomestic,label = avg_pax)) +
theme_minimal() +
geom_bar(stat="identity",alpha=0.8) +
labs(x="Month",y="Passengers") +
scale_y_continuous(labels = comma) +
ggtitle("The Monthly Average Passengers Count") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_discrete(name = "Destination",label=c("International","Domestic")) +
theme(plot.title = element_text(size = 20, face = "bold")) +
geom_text(size = 2, position = position_stack(vjust = 0.85), colour = "white")
# First, let's clean the data.
# Rename the column names
names(data) <- c("date", "operAirline", "operCode", "airline", "code", "isDomestic",
"region", "type", "category", "terminal", "area", "pax")
# Convert isDomestic to boolean
data$isDomestic %<>% recode("Domestic" = T, "International" = F)
# Reformat the dates into Date objects
data$date %<>%
as.character() %>%
as.yearmon("%Y%m") %>%
as.Date()
# Get month and year values
data %<>%
mutate(month = date %>% format("%m") %>% factor(labels = month.name),
year = date %>% format("%Y") %>% as.numeric())
# Remove data from 2005 for easy comparison
data %<>% filter(year != 2005)
data$region %<>% recode("Central America" = "Latin America",
"South America" = "Latin America")
data$category %<>% recode("Other" = "Full Service")
## operAirline = Operating Airline, the airline that really operating, some airline would own a child company to operate a single route
## operCode = Operating Airline Code
## airline = Published Airline, mother company airline
## code = Published Airline Code, code for variable "airline"
## isDomestic: If the flight is domestic,T; if international: F
## region: Geom region
## type: activity type; Deplaned means arrival, Enplaned means departure, Thru / Transit is other
## category: Airline price type; Low fare is Low cost carrier, else are others
## terminal: SFO terminal
## area: area within SFO terminal
## pax: passenger count of given row
View(data)
# First, let's clean the data.
# Rename the column names
names(data) <- c("date", "operAirline", "operCode", "airline", "code", "isDomestic",
"region", "type", "category", "terminal", "area", "pax")
# Convert isDomestic to boolean
data$isDomestic %<>% recode("Domestic" = T, "International" = F)
# Reformat the dates into Date objects
data$date %<>%
as.character() %>%
as.yearmon("%Y%m") %>%
as.Date()
# Get month and year values
data %<>%
mutate(month = date %>% format("%m") %>% factor(labels = month.name),
year = date %>% format("%Y") %>% as.numeric())
# Remove data from 2005 for easy comparison
data %<>% filter(year != 2005)
data$region %<>% recode("Central America" = "Latin America",
"South America" = "Latin America")
data$category %<>% recode("Other" = "Full Service")
## operAirline = Operating Airline, the airline that really operating, some airline would own a child company to operate a single route
## operCode = Operating Airline Code
## airline = Published Airline, mother company airline
## code = Published Airline Code, code for variable "airline"
## isDomestic: If the flight is domestic,T; if international: F
## region: Geom region
## type: activity type; Deplaned means arrival, Enplaned means departure, Thru / Transit is other
## category: Airline price type; Low fare is Low cost carrier, else are others
## terminal: SFO terminal
## area: area within SFO terminal
## pax: passenger count of given row
year = date %>% format("%Y") %>% as.numeric())
data %<>%
mutate(month = date %>% format("%m") %>% factor(labels = month.name),
year = date %>% format("%Y") %>% as.numeric())
# First, let's clean the data.
# Rename the column names
names(data) <- c("date", "operAirline", "operCode", "airline", "code", "isDomestic",
"region", "type", "category", "terminal", "area", "pax")
# Convert isDomestic to boolean
data$isDomestic %<>% recode("Domestic" = T, "International" = F)
# Reformat the dates into Date objects
data$date %<>%
as.character() %>%
as.yearmon("%Y%m") %>%
as.Date()
# Get month and year values
data %<>%
mutate(month = date %>% format("%m") %>% factor(labels = month.name),
year = date %>% format("%Y") %>% as.numeric())
# Remove data from 2005 for easy comparison
data %<>% filter(year != 2005)
data$region %<>% recode("Central America" = "Latin America",
"South America" = "Latin America")
data$category %<>% recode("Other" = "Full Service")
## operAirline = Operating Airline, the airline that really operating, some airline would own a child company to operate a single route
## operCode = Operating Airline Code
## airline = Published Airline, mother company airline
## code = Published Airline Code, code for variable "airline"
## isDomestic: If the flight is domestic,T; if international: F
## region: Geom region
## type: activity type; Deplaned means arrival, Enplaned means departure, Thru / Transit is other
## category: Airline price type; Low fare is Low cost carrier, else are others
## terminal: SFO terminal
## area: area within SFO terminal
## pax: passenger count of given row
library(tidyverse)
library(magrittr)
library(zoo)
library(ggplot2)
library(scales)
library(maps)
library(mapdata)
library(grid)
library(treemapify)
# First, let's clean the data.
# Rename the column names
names(data) <- c("date", "operAirline", "operCode", "airline", "code", "isDomestic",
"region", "type", "category", "terminal", "area", "pax")
# Convert isDomestic to boolean
data$isDomestic %<>% recode("Domestic" = T, "International" = F)
# Reformat the dates into Date objects
data$date %<>%
as.character() %>%
as.yearmon("%Y%m") %>%
as.Date()
# Get month and year values
data %<>%
mutate(month = date %>% format("%m") %>% factor(labels = month.name),
year = date %>% format("%Y") %>% as.numeric())
# Remove data from 2005 for easy comparison
data %<>% filter(year != 2005)
data$region %<>% recode("Central America" = "Latin America",
"South America" = "Latin America")
data$category %<>% recode("Other" = "Full Service")
## operAirline = Operating Airline, the airline that really operating, some airline would own a child company to operate a single route
## operCode = Operating Airline Code
## airline = Published Airline, mother company airline
## code = Published Airline Code, code for variable "airline"
## isDomestic: If the flight is domestic,T; if international: F
## region: Geom region
## type: activity type; Deplaned means arrival, Enplaned means departure, Thru / Transit is other
## category: Airline price type; Low fare is Low cost carrier, else are others
## terminal: SFO terminal
## area: area within SFO terminal
## pax: passenger count of given row
data %>%
group_by(isDomestic,month) %>%
summarise(avg_pax = round(mean(pax),digit =0)) %>%
ggplot(aes(x=month,y=avg_pax,fill=isDomestic,label = avg_pax)) +
theme_minimal() +
geom_bar(stat="identity",alpha=0.8) +
labs(x="Month",y="Passengers") +
scale_y_continuous(labels = comma) +
ggtitle("The Monthly Average Passengers Count") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_discrete(name = "Destination",label=c("International","Domestic")) +
theme(plot.title = element_text(size = 20, face = "bold")) +
geom_text(size = 2, position = position_stack(vjust = 0.85), colour = "white")
myflights <- hflights
myflights %>% mutate(Month = factor(Month,
labels = c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"),
levels = 1:12,
ordered= T)) %>%
count(Origin,Month) %>% ggplot() + geom_bar(aes(x=Origin,y=n,fill= Month),stat="identity",position = "dodge") +
labs(y = "Frequency")
myflights %>% mutate(Month = factor(Month,
labels = c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"),
levels = 1:12,
ordered= T)) %>%
count(Origin,Month) %>% ggplot() + geom_bar(aes(x=Month,y=n,fill= Origin),stat="identity",position = "dodge") +
labs(y = "Frequency")
curr_wd <- strsplit(getwd(), "/")[[1]]
if ("chunheisiu" %in% curr_wd) {
##setwd("/Users/chunheisiu/Dropbox/Documents/USF/2018_Spring/BSDS_100/USF-BSDS100-CaseStudy")
} else if ("jacquessham" %in% curr_wd){
setwd("/Users/jacquessham/Documents/GitHub/USF-CS360-FinalProject")
} else {
wd <- readline(prompt = "You're not Jacques or Charles! Enter the path to the data: ")
setwd(wd)
}
library(tidyverse)
library(magrittr)
library(zoo)
library(ggplot2)
library(scales)
library(maps)
library(mapdata)
library(grid)
data <- read.csv("whisky.csv")
names(data) <- c("whisky","score","sd","reviews","cost","class","super_cluster","cluster","country","type")
View(data)
data$sd <- NULL
table(data$cost)
data$cost %<>% recode("$"=0,"$$"=2,"$$$"=3,"$$$$"=4,"$$$$$"=5,"$$$$$+"=6)
data$super_cluster <- NULL
is.na(data$cluster)
table(data$cluster)
test <- data$cluster %>% recode(""="None")
test <- data$cluster %>% recode(""="None")
write.csv(data, file="whisky_clear.csv")
